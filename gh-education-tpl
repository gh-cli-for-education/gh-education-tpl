#!/usr/bin/env bash

## SCRIPT PATH ##
SCRIPTPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
source $SCRIPTPATH/menu-tpl

## INTERNAL VAR ##
VERSION="1.0.0"
NEXTVERSION=$(echo ${VERSION} | awk -F. -v OFS=. '{$NF += 1 ; print}')

## TO DO - Fix errors from ctrl + c or ctrl + d

## GENERAL VAR ##
FILEPATH=$PWD"/clone"
VITEDUPATH=$FILEPATH"/vite-education"
VITEPRESSPATH=$FILEPATH"/vite-education/docs/.vitepress"
DOCSPATH=$FILEPATH"/vite-education/docs/"
TEAMSPATH=$DOCSPATH"/public/data"
arr=("")
organization=""

### Colors ##
ESC=$(printf '\033') RESET="${ESC}[0m" BLACK="${ESC}[30m" RED="${ESC}[31m"
GREEN="${ESC}[32m" YELLOW="${ESC}[33m" BLUE="${ESC}[34m" MAGENTA="${ESC}[35m"
CYAN="${ESC}[36m" WHITE="${ESC}[37m" DEFAULT="${ESC}[39m" GRAY="${ESC}[38m"

### COLOR FUNCTION ##
printcolor() { printf "$1%s${RESET}\n" "$2"; }

## Progress bar for long running processes ##
progressbar() {
    trap 'break' USR1
    echo -ne ""$2" "$3""
    while echo -ne ""$2"." >&2; do
        sleep 0.25
    done
}

## Check if the clone folder has been downloaded before  ##
checkFolder() {
    if [ -d ${FILEPATH} ]; then
        echo -ne "$(printcolor $RED 'Clone folder found' )"
        progressbar 'printcolor' "$RED" 'Deleting' & pid="$!"
        rm -rf ${FILEPATH}; 
        kill -s USR1 "$pid"
        echo -ne "\n"
        return 0
    fi
    return 1
}

## Take the template and clone it in the clone folder  ##
cloneRepo() {
    echo -ne "$(printcolor $YELLOW '# CLONING TEMPLATE #' )"
    echo -e "\n"
    checkFolder
    echo -e "\n"
    echo -ne "$(printcolor $YELLOW "Cloning in ${FILEPATH}" )"
    echo -e "\n"
    progressbar 'printcolor' $CYAN 'Clonning' & pid="$!"
    cloneCmd="git clone git@github.com:gh-cli-for-education/gh-education.git ${FILEPATH}"
    cloneCmdRun=$($cloneCmd 2>&1)
    kill -s USR1 "$pid"
    echo -ne "\n $(printcolor $GREEN 'Clone completed succesfullly' ) \n"
}

## Update and write the teams of a organization into a file ##
updateTeams() {
    progressbar 'printcolor' "$CYAN" 'Updating Teams from Organization' & pid="$!"
    echo $TEAMSPATH
    getTeams=$(./update-teams $TEAMSPATH/teams.js ${arr[3]})
    kill -s USR1 "$pid"
}

## Project initial configuration ##
basicConfig() {

    exit=1

    while [ "$exit" != 0 ]
    do
        arr=("")
        opt=""

        echo -ne "$(printcolor $YELLOW '# PROJECT INITIAL CONFIGURATION #' )\n$(printcolor $CYAN '1)' ) Subject name\n"
        echo -ne "   "
        read -r opt
        arr+=(${opt})

        opt=""
        echo -ne "$(printcolor $CYAN '2)' ) Academic year (xxxx-yyyy)\n"
        echo -ne "   "
        read -r opt
        arr+=(${opt})

        opt=""
        echo -ne "$(printcolor $CYAN '3)' ) Github Organization\n"
        echo -ne "   "
        read -r opt
        arr+=(${opt})


        echo -ne "\ec"
        echo -ne "$(printcolor $YELLOW '# PROJECT INITIAL CONFIGURATION #' )\n"
        echo -ne "$(printcolor $CYAN 'Subject name: ' ) ${arr[1]} \n"
        echo -ne "$(printcolor $CYAN 'Academic year: ' ) ${arr[2]} \n"
        echo -ne "$(printcolor $CYAN 'Github Organization: ' ) ${arr[3]}  \n"
        
        setMenu "# ALL CORRECT? #"
        options=("yes" "no")
        chooseOption "${options[@]}"
        exit=$?
    done    

    organization=${arr[3]}
    projectid="${arr[1]}-${arr[2]}"

    auth $projectid
    echo -ne "\ec"
}

## Install npm packages usign the progress bar ##
npmInstall() {    
    
    echo -ne "$(printcolor $YELLOW '# INSTALLING AND CHECKING DEPENDENCIES #' )\n"   
    progressbar 'printcolor' "$GREEN" 'Installing' & pid="$!"
    
    installNPM="npm install"
    installNPMRun=$($installNPM 2>&1)

    kill -s USR1 "$pid"
    echo -ne "\n" 

}

## Refresh firebase configuration file with new project ##
refreshFirebaseConfig() {
    fichero="./firebase.js"
    if [[ -f $fichero ]]; then
        rm $fichero
    fi
    echo "
import { initializeApp } from 'firebase/app'
import { getAuth } from 'firebase/auth'
const firebaseConfig = " > $fichero
    firebase apps:sdkconfig WEB --project $1 --json > "./firebase-config.json"
    cat ./firebase-config.json | jq ".result.sdkConfig" >> $fichero
    echo "
const app = initializeApp(firebaseConfig);
const auth = getAuth();

export { auth }; " >> $fichero
}

## Authentication in firebase + firebase project creation ##
auth() {
    echo -ne "\n\n$(printcolor $GREEN '# FIREBASE CONFIGURATION #' )\n\n"  
    
    cd $DOCSPATH

    npm install

    cd $VITEPRESSPATH

    printf "\033c"
    echo -ne "$(printcolor $YELLOW '# FIREBASE LOGIN #' )\n" 
    firebase login

    # Ask user for creating project or list 

    options=("Create new project" "List existing projects" "Change current project" "Exit")

    setMenu "# FIREBASE PROJECT CREATION #"
    chooseOption "${options[@]}"
    choice=$?
    exit=1
    appInfo=""
    projectID="$1"
    
    while [ $exit != 0 ]
    do
        printf "\033c"
        case $choice in
            0)
                printf "\033c"
                echo -ne "$(printcolor $CYAN '# Project ID: ' ) $projectID\n" 
                firebase projects:create $projectID  
                firebase use $projectID
                firebase apps:create WEB $projectID 
                exit=0             
                ;;
            1)
                firebase projects:list
                echo -ne "$(printcolor $YELLOW '# PRESS ENTER TO EXIT #' )\n" 
                read -r 

                options=("Create new project" "List existing projects" "Change current project" "Exit")

                printf "\033c"
                setMenu "# FIREBASE PROJECT CREATION #"
                chooseOption "${options[@]}"
                choice=$?
                ;;
            2)       
                firebase projects:list
                echo -ne "$(printcolor $CYAN '# Project ID to change: ' )"
                proejctID=""
                read -r projectID         
                firebase use $projectID
                exit=0             
                ;;
        esac
    done
    
    refreshFirebaseConfig $projectID
    echo -ne "$(printcolor $YELLOW '# PRESS ENTER TO EXIT #' )\n" 
    read -r 

}

# Deployment of the site in firebase #
deploy() {
    echo -ne "$(printcolor $YELLOW '# TEMPLATE DEPLOY #' )\n" 

    opt=""
    echo -ne "$(printcolor $CYAN '1)' ) Github Repository in the organization\n"
    echo -ne "   "
    read -r opt

    cd $VITEDUPATH
    deploy=$(./deploy.sh $1/$opt)
}

# Initial menu configuration #
function setMenu() {

    maxCols=$(tput cols)
    rowOfSymbols 1 maxCols 
    displayTextCenter " "
    displayTextCenter " $1 "
    displayTextCenter " "
    rowOfSymbols 1 maxCols
    displayTextCenter " "

}

# Initial menÃº clone or skip #
initialmenu() {

    options=("Clone and config template" "Exit")
    if [ -d ${FILEPATH} ]; then
        options=("Clone and config template" "Deploy" "Refresh Teams" "Exit")
    fi

    setMenu "# AVAILABLE OPTIONS #"
    chooseOption "${options[@]}"
    choice=$?


    # TO DO - Add skip if clone exists

    case $choice in
        0)
            echo -en "\ec"
            cloneRepo    

            echo -en "\ec"
            basicConfig

            ;;
        1)
            echo -ne "\n"

            org=""
            echo -ne "$(printcolor $CYAN '1)' ) GitHub Organization\n"
            echo -ne "   "
            read -r org

            deploy $org
            echo -ne "$(printcolor $RED 'exiting...' )"
            echo -ne "\n"
            exit 0
            ;;

        2)            
            echo -en "\ec"
            updateTeams
            ;;
        *)
            cho -ne "$(printcolor $RED '0)' ) BAD OPTION"
            ;;
    esac
}

echo -en "\ec"

case $1 in

    "--version")
        echo -ne "$(printcolor $BLUE '# Current Version' ) -> $VERSION\n"    
        ;;

    "--help")
        echo -ne "$(printcolor $YELLOW '# HELP MENU # ' )\n"
        echo -ne "$(printcolor $BLUE '  --version ' ) -> Show the program version\n"          
        echo -ne "$(printcolor $BLUE '  --manual ' )    -> Show the manual\n"    
        echo -ne "$(printcolor $BLUE '  --help ' )    -> Show the program help\n"

        ;;

    "--manual")
        man "./manual"
        ;;

    *)
        initialmenu
        ;;

esac