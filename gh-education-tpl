#!/usr/bin/env bash

. $PWD/menu-tpl

## INTERNAL VAR ##
VERSION="1.0.0"
NEXTVERSION=$(echo ${VERSION} | awk -F. -v OFS=. '{$NF += 1 ; print}')

## GENERAL VAR ##
FILEPATH=$PWD"/clone"
TEAMSPATH=$FILEPATH"/vite-education/docs/.vitepress/publico/"
VITEDUPATH=$FILEPATH"/vite-education"
VITEPRESSPATH=$FILEPATH"/vite-education/docs/.vitepress"
DOCSPATH=$FILEPATH"/vite-education/docs/"
arr=("")

### Colors ##
ESC=$(printf '\033') RESET="${ESC}[0m" BLACK="${ESC}[30m" RED="${ESC}[31m"
GREEN="${ESC}[32m" YELLOW="${ESC}[33m" BLUE="${ESC}[34m" MAGENTA="${ESC}[35m"
CYAN="${ESC}[36m" WHITE="${ESC}[37m" DEFAULT="${ESC}[39m" GRAY="${ESC}[38m"

### Color Functions ##
printcolor() { printf "$1%s${RESET}\n" "$2"; }

## Main Functions ##

progressbar () {
    trap 'break' USR1
    echo -ne ""$2" "$3""
    while echo -ne ""$2"." >&2; do
        sleep 0.25
    done
}


## TO-DO Check this function
checkFolder() {
    if [ -d "${FILEPATH}" ]; 
        echo -ne "$(printcolor $RED 'Clone folder found' )"
        progressbar 'printcolor' "$RED" 'Deleting' & pid="$!"
        then rm -Rf ${FILEPATH}; 
        kill -s USR1 "$pid"
        echo -ne "\n"
    fi
}

cloneRepo() {
    echo -e "\n"
    checkFolder
    echo -ne "$(printcolor $YELLOW "Clonning in ${FILEPATH}" )"
    echo -e "\n"
    progressbar 'printcolor' "$CYAN" 'Clonning' & pid="$!"
    cloneCmd="git clone git@github.com:gh-cli-for-education/gh-education.git ${FILEPATH}"
    cloneCmdRun=$($cloneCmd 2>&1)
    kill -s USR1 "$pid"
    echo -ne "\n $(printcolor $GREEN 'Clone completed succesfullly' ) \n"
}

updateTeams() {
    progressbar 'printcolor' "$CYAN" 'Updating Teams from Organization' & pid="$!"
    getTeams=$(./update-teams $TEAMSPATH/teams.js ${arr[3]})
    kill -s USR1 "$pid"
}

basicConfig() {

    exit="no"

    # TO DO - Allow yes, Yes, YES
    while [ "$exit" != "yes" ]
    do
        arr=("")
        opt=""

        echo -ne "$(printcolor $YELLOW '# PROJECT INITIAL CONFIGURATION #' )\n$(printcolor $CYAN '1)' ) Subject name\n"
        echo -ne "   "
        read -r opt
        arr+=(${opt})

        opt=""
        echo -ne "$(printcolor $CYAN '2)' ) Academic year\n"
        echo -ne "   "
        read -r opt
        arr+=(${opt})

        opt=""
        echo -ne "$(printcolor $CYAN '3)' ) Github Organization\n"
        echo -ne "   "
        read -r opt
        arr+=(${opt})


        echo -ne "\ec"
        echo -ne "$(printcolor $YELLOW '# PROJECT INITIAL CONFIGURATION #' )\n"
        echo -ne "$(printcolor $CYAN 'Subject name: ' ) ${arr[1]} \n"
        echo -ne "$(printcolor $CYAN 'Academic year: ' ) ${arr[2]} \n"
        echo -ne "$(printcolor $CYAN 'Github Organization: ' ) ${arr[3]}  \n"
        
        echo -ne "$(printcolor $YELLOW '# ALL CORRECT? #' ) \n"
        echo -ne "$(printcolor $GREEN ' - yes' ) \n"
        echo -ne "$(printcolor $RED ' - no' ) \n"

        read -r exit
    done
    

    auth
    echo -ne "\ec"
}

npmInstall() {    
    
    echo -ne "$(printcolor $YELLOW '# INSTALLING AND CHECKING DEPENDENCIES #' )\n"   
    progressbar 'printcolor' "$GREEN" 'Installing' & pid="$!"
    
    installNPM="npm install"
    installNPMRun=$($installNPM 2>&1)

    kill -s USR1 "$pid"
    echo -ne "\n" 

}

auth() {

    echo -ne "$(printcolor $GREEN '# FIREBASE CONFIGURATION #' )\n\n"  
    
    cd $DOCSPATH

    npm install

    cd $VITEPRESSPATH

    echo -ne "$(printcolor $YELLOW '# FIREBASE LOGIN #' )\n" 
    firebase login

    # Ask user for creating project or list 

    options=("Create new project" "List existing projects" "Change current project" "Exit")

    printf "\033c"
    setMenu "# FIREBASE PROJECT CREATION #"
    chooseOption "${options[@]}"
    choice=$?
    
    case $choice in
        0)
            echo -ne "$(printcolor $CYAN '# Project ID: (enter for a default name)' )" 
            echo -ne " more the 6 characters\n ->" 
            proejctID=""
            read -r projectID
            firebase projects:create projectID
            firebase apps:create WEB projectID              
            ;;
        1)
            firebase projects:list
            echo -ne "$(printcolor $YELLOW '# PRESS ENTER TO EXIT #' )\n" 
            read -r 
            ;;
        2)       
            echo -ne "$(printcolor $CYAN '# Project ID to change: ' )"
            proejctID=""
            read -r projectID         
            firebase use projectID
            ;;
    esac
    
    # firebase apps:sdkconfig [options] [platform] [appId]

    echo -ne "$(printcolor $YELLOW '# TEMPLATE DEPLOY #' )\n" 

    cd $VITEDUPATH
    npmInstall

    npm run docs:build

    cd $VITEPRESSPATH

    firebase deploy --only hosting
    read -r 

}

function setMenu() {

    maxCols=$(tput cols)
    rowOfSymbols 1 maxCols 
    displayTextCenter " "
    displayTextCenter " $1 "
    displayTextCenter " "
    rowOfSymbols 1 maxCols
    displayTextCenter " "

}

templateConfiguration() {
    echo -en "\ec"
    options=("Refresh Org Teams" "Exit")

    setMenu "# TEMPLATE CONFIGURATION #"
    chooseOption "${options[@]}"
    choice=$?
    case $choice in
        0)
            echo -en "\ec"
            updateTeams
            ;;
        1)
            echo -ne "$(printcolor $RED 'exiting...' )"
            echo -ne "\n"
            exit 0
            ;;
    esac
}

initialmenu() {
    options=("Clone and config template" "Exit")

    setMenu "# AVAILABLE OPTIONS #"
    chooseOption "${options[@]}"
    choice=$?

    case $choice in
        0)
            echo -en "\ec"
            cloneRepo    

            echo -en "\ec"
            basicConfig

            templateConfiguration
            ;;
        1)
            echo -ne "\n"
            echo -ne "$(printcolor $RED 'exiting...' )"
            echo -ne "\n"
            exit 0
            ;;
        *)
            cho -ne "$(printcolor $RED '0)' ) BAD OPTION"
            ;;
    esac
}

echo -en "\ec"

case $1 in

    "--version")
        echo -ne "$(printcolor $BLUE '# Current Version' ) -> $VERSION\n"    
        ;;

    "--help")
        echo -ne "$(printcolor $YELLOW '# HELP MENU # ' )\n"
        echo -ne "$(printcolor $BLUE '  --version ' ) -> Show the program version\n"          
        echo -ne "$(printcolor $BLUE '  --manual ' )    -> Show the manual\n"    
        echo -ne "$(printcolor $BLUE '  --help ' )    -> Show the program help\n"

        ;;

    "--manual")
        man "./manual"
        ;;

    *)
        initialmenu
        ;;

esac